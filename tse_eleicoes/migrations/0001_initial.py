# Generated by Django 3.2.5 on 2021-09-23 21:06

from django.db import migrations, models
import django.db.models.deletion
import psqlextra.manager.manager
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generation_date', models.TextField(help_text='Data e hora da extração dos dados para geração do arquivo')),
                ('year', models.IntegerField(help_text='Ano de referência da eleição para geração do arquivo')),
                ('election_type_code', models.TextField(help_text='Código do tipo de eleição')),
                ('election_type_name', models.TextField(help_text='Nome do tipo de eleição')),
                ('electoral_round_number', models.TextField(help_text='Número do turno da eleição')),
                ('election_code', models.TextField(help_text='Código único da eleição no âmbito da Justiça Eleitoral')),
                ('election_description', models.TextField(help_text='Descrição da eleição')),
                ('election_date', models.TextField(help_text='Data em que ocorreu a eleição')),
                ('coverage', models.TextField(help_text='Abrangência da eleição')),
                ('federative_unit', models.TextField(help_text='Sigla da Unidade da Federação em que ocorreu a eleição')),
                ('election_unit_initials', models.TextField(help_text='Sigla da Unidade Eleitoral em que o candidato concorre na eleição')),
                ('election_unit_name', models.TextField(help_text='Nome da Unidade Eleitoral do candidato')),
                ('position_code', models.TextField(help_text='Código do cargo ao qual o candidato concorre na eleição')),
                ('position', models.TextField(help_text='Cargo ao qual o candidato concorre na eleição')),
                ('tse_number', models.TextField(help_text='Número sequencial do candidato')),
                ('number', models.TextField(help_text='Número do candidato na urna')),
                ('name', models.TextField(help_text='Nome completo do candidato')),
                ('urna_name', models.TextField(help_text='Nome do candidato que aparece na urna')),
                ('social_name', models.TextField(help_text='Nome social do candidato')),
                ('cpf', models.TextField(help_text='Número do CPF do candidato')),
                ('email', models.TextField(help_text='Endereço de e-mail do candidato')),
                ('candidature_status_code', models.TextField(help_text='Código da situação do registro de candidatura do candidato')),
                ('candidature_status', models.TextField(help_text='Situação do registro da candidatura do candidato')),
                ('candidature_detail_status_code', models.TextField(help_text='Código do detalhe da situação do registro de candidatura do candidato')),
                ('candidature_detail_status', models.TextField(help_text='Detalhe da situação do registro de candidatura do candidato')),
                ('association_type', models.TextField(help_text='Tipo de agremiação da candidatura do candidato')),
                ('coalition_number', models.TextField(help_text='Sequencial da coligação da qual o candidato pertence, gerado pela Justiça Eleitoral')),
                ('coalition_name', models.TextField(help_text='Nome da coligação da qual o candidato pertence')),
                ('coalition_composition', models.TextField(help_text='Composição da coligação da qual o candidato pertence')),
                ('nationality_code', models.TextField(help_text='Código da nacionalidade do candidato')),
                ('nationality', models.TextField(help_text='Nacionalidade do candidato')),
                ('birth_federative_unit', models.TextField(help_text='Sigla da Unidade da Federação de nascimento do candidato')),
                ('birth_county_code', models.TextField(help_text='Código de identificação do município de nascimento do candidato')),
                ('birth_county', models.TextField(help_text='Nome do município de nascimento do candidato')),
                ('birthdate', models.TextField(help_text='Data de nascimento do candidato')),
                ('age_at_possession', models.IntegerField(help_text='Idade do candidato na data da posse')),
                ('voter_registration', models.TextField(help_text='Número do título eleitoral do candidato')),
                ('gender_code', models.TextField(help_text='Código do gênero do candidato')),
                ('gender', models.TextField(help_text='Gênero do candidato')),
                ('education_level_code', models.TextField(help_text='Código do grau de instrução do candidato')),
                ('education_level', models.TextField(help_text='Grau de instrução do candidato')),
                ('marital_status_code', models.TextField(help_text='Código do estado civil do candidato')),
                ('marital_status', models.TextField(help_text='Estado civil do candidato')),
                ('color_code', models.TextField(help_text='Código da cor/raça do candidato')),
                ('color', models.TextField(help_text='Cor/raça do candidato')),
                ('ocupation_code', models.TextField(help_text='Código da ocupação do candidato')),
                ('ocupation', models.TextField(help_text='Ocupação do candidato')),
                ('expense', models.BigIntegerField(help_text='Valor máximo, em reais, de despesas de campanha declarada pelo partido para aquele candidato')),
                ('totalization_situation_code', models.TextField(help_text='Código da situação de totalização do candidato, naquele turno da eleição, após a totalização dos votos')),
                ('totalization_situation', models.TextField(help_text='Situação de totalização do candidato, naquele turno da eleição, após a totalização dos votos')),
                ('reelection', models.TextField(help_text='Indica se o candidato está concorrendo ou não à reeleição')),
                ('assets_declaration_status', models.TextField(help_text='Indica se o candidato tem ou não bens a declarar')),
                ('application_protocol', models.TextField(help_text='Número do protocolo de registro de candidatura do candidato')),
                ('process_number', models.TextField(help_text='Número do processo de registro de candidatura do candidato')),
                ('election_day_application_status_code', models.TextField(help_text='Código da situação da candidatura no dia do Pleito')),
                ('election_day_application_status', models.TextField(help_text='Situação da candidatura no dia do Pleito')),
                ('urna_status_code', models.TextField(help_text='Código da situação da candidatura na urna')),
                ('urna_status', models.TextField(help_text='Situação da candidatura na urna.')),
                ('inserted_urna', models.BooleanField(help_text='Informa se o candidato foi inserido na urna eletrônica', null=True)),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Delegate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number', models.TextField(help_text='Número sequencial do delegado do partido político gerado internamente pelos sistemas eleitorais')),
                ('name', models.TextField(help_text='Nome do delegado do partido político')),
                ('accreditation_date', models.DateField(help_text='Data de credenciamento como delegado')),
                ('deaccreditation_date', models.DateField(help_text='Data de descredenciamento como delegado', null=True)),
                ('generation_date', models.DateTimeField(help_text='Data e hora de geração do arquivo', null=True)),
                ('coverage_type_code', models.TextField(help_text='Código do tipo da abrangência do partido político que o delegado faz parte')),
                ('coverage_type_description', models.TextField(help_text='Descrição da abrangência do partido político que o delegado faz parte')),
                ('federative_unit', models.TextField(help_text='Sigla da Unidade da Federação ao qual partido político que o delegado faz parte')),
                ('electoral_unit', models.TextField(help_text='Sigla da Unidade Eleitoral')),
                ('electoral_unit_name', models.TextField(help_text='Nome da Unidade Eleitoral')),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finished', models.BooleanField(default=False)),
                ('type', models.IntegerField(choices=[(0, 'Party Member'), (1, 'Delegate'), (2, 'Candidate'), (3, 'Removal')])),
                ('uri', models.URLField()),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generation_date', models.DateTimeField(help_text='Data e hora de geração do arquivo')),
                ('situation', models.TextField(help_text='Nome da situação do Órgão Partidário')),
                ('federative_unit', models.TextField(help_text='Sigla da Unidade da Federação do Órgão Político')),
                ('electoral_unit_initials', models.TextField(help_text='Sigla da Unidade Eleitoral')),
                ('electoral_unit_name', models.TextField(help_text='Nome da Unidade Eleitoral')),
                ('county_code', models.TextField(help_text='Código do município')),
                ('county_name', models.TextField(help_text='Nome do município')),
                ('address_description', models.TextField(help_text='Descrição do endereço do órgão partidário')),
                ('zip_code', models.TextField(help_text='CEP do endereço do Órgão Partidário')),
                ('phone_number', models.TextField(help_text='Número do telefone fixo do Órgão Partidário')),
                ('cellphone_number', models.TextField(help_text='Número do telefone celular do Órgão Partidário')),
                ('commercial_phone_number', models.TextField(help_text='Número do telefone comercial do Órgão Partidário')),
                ('fax_number', models.TextField(help_text='Número do fax do Órgão Partidário')),
                ('effective_date', models.DateField(help_text='Data de início de vigência do Órgão Político')),
                ('end_date', models.DateField(help_text='Data fim de vigência do Órgão Político', null=True)),
                ('covegare_type_code', models.TextField(help_text='Código do tipo da abrangência do órgão político')),
                ('covegare_type_description', models.TextField(help_text='Descrição da abrangência do partido político que o delegado faz parte')),
                ('type_code', models.TextField(help_text='Código do tipo de órgão partidário')),
                ('type_name', models.TextField(help_text='Nome do Tipo de Órgão Partidário')),
                ('electoral_system_number', models.TextField(help_text='Número sequencial do órgão partidário gerado internamente pelos sistemas eleitorais')),
                ('email', models.TextField(help_text='Descrição do e-mail do Órgão Partidário')),
                ('position_number', models.TextField(help_text='Número sequencial do cargo do membro do órgão partidário')),
                ('position_description', models.TextField(help_text='Descrição do cargo do membro do Órgão Partidário')),
                ('member_number', models.TextField(help_text='Número sequencial do membro gerado internamente pelos sistemas eleitorais')),
                ('member_name', models.TextField(help_text='Nome do membro do Órgão Partidário')),
                ('assignment_start_date', models.DateField(help_text='Data de início de exercício do membro')),
                ('assignment_end_date', models.DateField(help_text='Data fim do exercício do membro', null=True)),
                ('status', models.TextField(help_text='Status do Membro')),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initials', models.TextField(help_text='Sigla do Partido Político')),
                ('number', models.TextField(help_text='Número do Partido Político', unique=True)),
                ('name', models.TextField(help_text='Nome do Partido Político')),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.IntegerField(unique=True)),
                ('finished', models.BooleanField(default=False)),
                ('folder', models.TextField()),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Removal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generation_date', models.TextField(help_text='Data e hora da extração dos dados para geração do arquivo')),
                ('year', models.TextField(help_text='Ano da eleição')),
                ('election_type_code', models.TextField(help_text='Código do tipo de eleição')),
                ('election_type', models.TextField(help_text='Tipo de eleição')),
                ('election_code', models.TextField(help_text='Código da eleição')),
                ('election', models.TextField(help_text='Descrição da eleição')),
                ('federative_unit', models.TextField(help_text='Sigla da Unidade Federativa onde ocorreu a eleição')),
                ('election_unit_initials', models.TextField(help_text='Sigla da Unidade Eleitoral do candidato')),
                ('election_unit', models.TextField(help_text='Nome da Unidade Eleitoral do candidato')),
                ('tse_number', models.TextField(help_text='Número sequencial do candidato gerado internamente pelos sistemas eleitorais')),
                ('removal_description', models.TextField(help_text='Descrição do motivo da cassação')),
                ('candidate', models.ForeignKey(help_text='Candidato', on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.candidate')),
            ],
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_8c1722_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_c523bc_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['finished'], name='tse_eleicoe_finishe_01d3b4_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_7a99cf_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_9b3bc6_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['initials'], name='tse_eleicoe_initial_ef1ef9_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['number'], name='tse_eleicoe_number_566d16_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['name'], name='tse_eleicoe_name_d17fe6_idx'),
        ),
        migrations.AddField(
            model_name='member',
            name='party',
            field=models.ForeignKey(help_text='Partido', on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.party'),
        ),
        migrations.AddField(
            model_name='download',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.release'),
        ),
        migrations.AddField(
            model_name='delegate',
            name='party',
            field=models.ForeignKey(help_text='Partido', on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.party'),
        ),
        migrations.AddField(
            model_name='candidate',
            name='member',
            field=models.ForeignKey(help_text='Dados do membro no partido', on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.member'),
        ),
        migrations.AddField(
            model_name='candidate',
            name='party',
            field=models.ForeignKey(help_text='Partido de origem do candidato', on_delete=django.db.models.deletion.CASCADE, to='tse_eleicoes.party'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_a67e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_7d4b07_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['year'], name='tse_eleicoe_year_739b8e_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['election_type_code'], name='tse_eleicoe_electio_4fa5f9_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['election_code'], name='tse_eleicoe_electio_e59e6e_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['federative_unit'], name='tse_eleicoe_federat_f2f707_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['election_unit_initials'], name='tse_eleicoe_electio_0b64b5_idx'),
        ),
        migrations.AddIndex(
            model_name='removal',
            index=models.Index(fields=['tse_number'], name='tse_eleicoe_tse_num_a52b17_idx'),
        ),
        migrations.AddConstraint(
            model_name='removal',
            constraint=models.UniqueConstraint(fields=('year', 'election_type_code', 'election_code', 'federative_unit', 'election_unit_initials', 'tse_number'), name='unique_tse_eleicoes_removal'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_57b715_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_0661b7_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['email'], name='tse_eleicoe_email_8bbaa0_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['member_name'], name='tse_eleicoe_member__1a84ea_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['status'], name='tse_eleicoe_status_b68b4f_idx'),
        ),
        migrations.AddConstraint(
            model_name='member',
            constraint=models.UniqueConstraint(fields=('party', 'member_number', 'member_name'), name='unique_tse_eleicoes_member'),
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_a6b61e_idx'),
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_be8152_idx'),
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['finished'], name='tse_eleicoe_finishe_7bc4ee_idx'),
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['type'], name='tse_eleicoe_type_fc6ea8_idx'),
        ),
        migrations.AddConstraint(
            model_name='download',
            constraint=models.UniqueConstraint(fields=('release', 'type', 'uri'), name='unique_tse_eleicoes_download'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_91b48c_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_b8ca06_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['number'], name='tse_eleicoe_number_2f45c4_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['name'], name='tse_eleicoe_name_58d105_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['accreditation_date'], name='tse_eleicoe_accredi_716b4f_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['deaccreditation_date'], name='tse_eleicoe_deaccre_8341eb_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['coverage_type_code'], name='tse_eleicoe_coverag_eae991_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['federative_unit'], name='tse_eleicoe_federat_cf3f84_idx'),
        ),
        migrations.AddIndex(
            model_name='delegate',
            index=models.Index(fields=['electoral_unit'], name='tse_eleicoe_elector_238a39_idx'),
        ),
        migrations.AddConstraint(
            model_name='delegate',
            constraint=models.UniqueConstraint(fields=('number', 'name', 'accreditation_date', 'party', 'federative_unit', 'electoral_unit'), name='unique_tse_eleicoes_delegate'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['created_at'], name='tse_eleicoe_created_5bd2bd_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['updated_at'], name='tse_eleicoe_updated_e6fd4c_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['year'], name='tse_eleicoe_year_2581e6_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['number'], name='tse_eleicoe_number_a34576_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['name'], name='tse_eleicoe_name_6004a1_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['urna_name'], name='tse_eleicoe_urna_na_9dcceb_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['social_name'], name='tse_eleicoe_social__884839_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['cpf'], name='tse_eleicoe_cpf_5f5796_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['email'], name='tse_eleicoe_email_276734_idx'),
        ),
        migrations.AddConstraint(
            model_name='candidate',
            constraint=models.UniqueConstraint(fields=('year', 'election_type_code', 'election_code', 'federative_unit', 'election_unit_initials', 'tse_number'), name='unique_tse_eleicoes_candidate'),
        ),
    ]
